
// NOTE: this source file is GENERATED by the LibraryPreBuild LibraryConfig named action.
// DO NOT EDIT THIS FILE, IT IS NOT CHECKED IN TO SOURCE CONTROL!
using System;

// This source file resides in the "LinkedSource" source code folder in order to enable
// multiple assemblies to share the implementation without requiring the class to be exposed as a
// public type of any shared assembly.
//
// Requires:
//  - N/A
namespace Sage.CM.HostingFramework.LinkedSource
{
    using System.Globalization;
    using System.IO;

    internal static class LibraryConstants
    {
        /// <summary>
        /// The library set ID for the library.
        /// </summary>
        public const String LibrarySetId = "CM";

        /// <summary>
        /// The library name for the library.
        /// </summary>
        public const String LibraryName = "HostingFramework";

        /// <summary>
        /// The library version for the library in "major.minor" format.
        /// </summary>
        public const String LibraryVersion = "4.5";

        /// <summary>
        /// The full-name of an assembly in the Sage CM\HostingFramework library.
        /// </summary>
        /// <param name="assemblyDisplayName">The display name of the assembly</param>
        /// <returns>The assembly full-name as in:  &lt;Display Name&gt;,&lt;Version&gt;,&lt;Culture&gt;,&lt;PublicKey Token&gt;</returns>
        public static String LibraryAssemblyFullName(String assemblyDisplayName)
        { return String.Format(CultureInfo.InvariantCulture, "{0},Version={1}.0.0,Culture=neutral,PublicKeyToken=3e78b2cabf12f868", assemblyDisplayName, LibraryVersion); }

        public class VersionSpecific
        {
            /// <summary>
            /// A version-specific relative path for this library.
            /// 
            /// &lt;LibrarySetId&gt;\&lt;Library Name&gt;\&lt;LibraryVersion&gt;
            /// </summary>
            private static String LibraryRelativePath
            { get { return String.Format(CultureInfo.InvariantCulture, @"{0}\{1}\{2}", LibrarySetId, LibraryName, LibraryVersion); } }

            /// <summary>
            /// The path to the version-specific Application Data folder for this library.
            /// 
            /// [Runtime Files]\Documents and Settings\All Users\Application Data\Sage\&lt;LibrarySetId&gt;\&lt;Library Name&gt;\&lt;LibraryVersion&gt;
            /// </summary>
            /// <param name="sharedConfigLocation">The shared config location (typically supplied by Sage.Configuration.LibraryManager.SharedConfigLocation (Sage.LS2.Core.LibraryManager.dll)</param>
            public static String LibraryApplicationDataFolder(String sharedConfigLocation)
            { return Path.Combine(sharedConfigLocation, LibraryRelativePath); }

            /// <summary>
            /// The path to the version-specific Common Files folder for this library.
            /// 
            /// [Runtime Files]\Common Files\Sage\&lt;LibrarySetId&gt;\&lt;Library Name&gt;\&lt;LibraryVersion&gt;
            /// </summary>
            /// <param name="sharedLibrariesLocation">The shared libraries location (typically supplied by Sage.Configuration.LibraryManager.SharedLibrariesLocation (Sage.LS2.Core.LibraryManager.dll)</param>
            public static String LibraryCommonFilesFolder(String sharedLibrariesLocation)
            { return Path.Combine(sharedLibrariesLocation, LibraryRelativePath); }

            /// <summary>
            /// The name of the version-specific registry key name for this library.
            /// 
            /// SOFTWARE\Sage\&lt;LibrarySetId&gt;\&lt;Library Name&gt;\&lt;LibraryVersion&gt;
            /// </summary>
            public static String LibraryRegistryKeyName
            { get { return Path.Combine(@"SOFTWARE\Sage", LibraryRelativePath); } }
        }

        public class VersionIndependent
        {
            /// <summary>
            /// A version-independent relative path for this library.
            /// 
            /// &lt;LibrarySetId&gt;\&lt;Library Name&gt;
            /// </summary>
            private static String LibraryRelativePath
            { get { return String.Format(CultureInfo.InvariantCulture, @"{0}\{1}", LibrarySetId, LibraryName); } }

            /// <summary>
            /// The path to the version-independent Application Data folder for this library.
            /// 
            /// [Runtime Files]\Documents and Settings\All Users\Application Data\Sage\&lt;LibrarySetId&gt;\&lt;Library Name&gt;
            /// </summary>
            /// <param name="sharedConfigLocation">The shared config location (typically supplied by Sage.Configuration.LibraryManager.SharedConfigLocation (Sage.LS2.Core.LibraryManager.dll)</param>
            public static String LibraryApplicationDataFolder(String sharedConfigLocation)
            { return Path.Combine(sharedConfigLocation, LibraryRelativePath); }

            /// <summary>
            /// The path to the version-independent Common Files folder for this library.
            /// 
            /// [Runtime Files]\Common Files\Sage\&lt;LibrarySetId&gt;\&lt;Library Name&gt;
            /// </summary>
            /// <param name="sharedLibrariesLocation">The shared libraries location (typically supplied by Sage.Configuration.LibraryManager.SharedLibrariesLocation (Sage.LS2.Core.LibraryManager.dll)</param>
            public static String LibraryCommonFilesFolder(String sharedLibrariesLocation)
            { return Path.Combine(sharedLibrariesLocation, LibraryRelativePath); }

            /// <summary>
            /// The name of the version-independent registry key name for this library.
            /// 
            /// SOFTWARE\Sage\&lt;LibrarySetId&gt;\&lt;Library Name&gt;
            /// </summary>
            public static String LibraryRegistryKeyName
            { get { return Path.Combine(@"SOFTWARE\Sage", LibraryRelativePath); } }
        }
    }
}
		